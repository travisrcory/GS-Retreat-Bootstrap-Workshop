<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
--%>

<%
if (Validator.isNull(script)) {
	script = structure.getXsd();
	scriptJSONArray = DDMXSDUtil.getJSONArray(script);
}

if (scriptJSONArray != null) {
	scriptJSONArray = _addFormTemplateFieldAttributes(structure, scriptJSONArray);
}

String namespace = renderResponse.getNamespace();

if (Validator.isNotNull(portletResourceNamespace)) {
	namespace = portletResourceNamespace;
}
%>

<aui:input name="language" type="hidden" value="xsd" />
<aui:input name="scriptContent" type="hidden" />

<aui:script>
	window["<%= HtmlUtil.escapeJS(namespace) %>getAvailableFields"] = function(A, FormBuilder) {
		var availableFields = <%= scriptJSONArray.toString() %>;

		A.Array.each(
			availableFields,
			function(item, index, collection) {
				item.iconClass = FormBuilder.DEFAULT_ICON_CLASS;
			}
		);

		return availableFields.concat(FormBuilder.AVAILABLE_FIELDS.DDM_TEMPLATE);
	};
</aui:script>

<%!
public JSONArray _addFormTemplateFieldAttributes(DDMStructure structure, JSONArray scriptJSONArray) throws Exception {
	for (int i = 0; i < scriptJSONArray.length(); i++) {
		JSONObject jsonObject = scriptJSONArray.getJSONObject(i);

		String fieldName = jsonObject.getString("name");

		try {
			jsonObject.put("readOnlyAttributes", _getFieldReadOnlyAttributes(structure, fieldName));
			jsonObject.put("unique", true);
		}
		catch (StructureFieldException sfe) {
		}
	}

	return scriptJSONArray;
}

public JSONArray _getFieldReadOnlyAttributes(DDMStructure structure, String fieldName) throws Exception {
	JSONArray readOnlyAttributesJSONArray = JSONFactoryUtil.createJSONArray();

	readOnlyAttributesJSONArray.put("indexType");
	readOnlyAttributesJSONArray.put("name");
	readOnlyAttributesJSONArray.put("options");
	readOnlyAttributesJSONArray.put("repeatable");

	boolean required = structure.getFieldRequired(fieldName);

	if (required) {
		readOnlyAttributesJSONArray.put("required");
	}

	return readOnlyAttributesJSONArray;
}
%>