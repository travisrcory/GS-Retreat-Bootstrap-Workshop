/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.portal.workflow.kaleo.forms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink;
import com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLinkModel;
import com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLinkSoap;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KaleoProcessLink service. Represents a row in the &quot;KaleoProcessLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KaleoProcessLinkImpl}.
 * </p>
 *
 * @author Marcellus Tavares
 * @see KaleoProcessLinkImpl
 * @see com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink
 * @see com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLinkModel
 * @generated
 */
@JSON(strict = true)
public class KaleoProcessLinkModelImpl extends BaseModelImpl<KaleoProcessLink>
	implements KaleoProcessLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kaleo process link model instance should use the {@link com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink} interface instead.
	 */
	public static final String TABLE_NAME = "KaleoProcessLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kaleoProcessLinkId", Types.BIGINT },
			{ "kaleoProcessId", Types.BIGINT },
			{ "workflowTaskName", Types.VARCHAR },
			{ "DDMTemplateId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table KaleoProcessLink (kaleoProcessLinkId LONG not null primary key,kaleoProcessId LONG,workflowTaskName VARCHAR(75) null,DDMTemplateId LONG)";
	public static final String TABLE_SQL_DROP = "drop table KaleoProcessLink";
	public static final String ORDER_BY_JPQL = " ORDER BY kaleoProcessLink.kaleoProcessLinkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY KaleoProcessLink.kaleoProcessLinkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink"),
			true);
	public static long KALEOPROCESSID_COLUMN_BITMASK = 1L;
	public static long WORKFLOWTASKNAME_COLUMN_BITMASK = 2L;
	public static long KALEOPROCESSLINKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KaleoProcessLink toModel(KaleoProcessLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KaleoProcessLink model = new KaleoProcessLinkImpl();

		model.setKaleoProcessLinkId(soapModel.getKaleoProcessLinkId());
		model.setKaleoProcessId(soapModel.getKaleoProcessId());
		model.setWorkflowTaskName(soapModel.getWorkflowTaskName());
		model.setDDMTemplateId(soapModel.getDDMTemplateId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KaleoProcessLink> toModels(
		KaleoProcessLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KaleoProcessLink> models = new ArrayList<KaleoProcessLink>(soapModels.length);

		for (KaleoProcessLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink"));

	public KaleoProcessLinkModelImpl() {
	}


	public long getPrimaryKey() {
		return _kaleoProcessLinkId;
	}


	public void setPrimaryKey(long primaryKey) {
		setKaleoProcessLinkId(primaryKey);
	}


	public Serializable getPrimaryKeyObj() {
		return _kaleoProcessLinkId;
	}


	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}


	public Class<?> getModelClass() {
		return KaleoProcessLink.class;
	}


	public String getModelClassName() {
		return KaleoProcessLink.class.getName();
	}


	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kaleoProcessLinkId", getKaleoProcessLinkId());
		attributes.put("kaleoProcessId", getKaleoProcessId());
		attributes.put("workflowTaskName", getWorkflowTaskName());
		attributes.put("DDMTemplateId", getDDMTemplateId());

		return attributes;
	}


	public void setModelAttributes(Map<String, Object> attributes) {
		Long kaleoProcessLinkId = (Long)attributes.get("kaleoProcessLinkId");

		if (kaleoProcessLinkId != null) {
			setKaleoProcessLinkId(kaleoProcessLinkId);
		}

		Long kaleoProcessId = (Long)attributes.get("kaleoProcessId");

		if (kaleoProcessId != null) {
			setKaleoProcessId(kaleoProcessId);
		}

		String workflowTaskName = (String)attributes.get("workflowTaskName");

		if (workflowTaskName != null) {
			setWorkflowTaskName(workflowTaskName);
		}

		Long DDMTemplateId = (Long)attributes.get("DDMTemplateId");

		if (DDMTemplateId != null) {
			setDDMTemplateId(DDMTemplateId);
		}
	}

	@JSON

	public long getKaleoProcessLinkId() {
		return _kaleoProcessLinkId;
	}


	public void setKaleoProcessLinkId(long kaleoProcessLinkId) {
		_kaleoProcessLinkId = kaleoProcessLinkId;
	}

	@JSON

	public long getKaleoProcessId() {
		return _kaleoProcessId;
	}


	public void setKaleoProcessId(long kaleoProcessId) {
		_columnBitmask |= KALEOPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalKaleoProcessId) {
			_setOriginalKaleoProcessId = true;

			_originalKaleoProcessId = _kaleoProcessId;
		}

		_kaleoProcessId = kaleoProcessId;
	}

	public long getOriginalKaleoProcessId() {
		return _originalKaleoProcessId;
	}

	@JSON

	public String getWorkflowTaskName() {
		if (_workflowTaskName == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowTaskName;
		}
	}


	public void setWorkflowTaskName(String workflowTaskName) {
		_columnBitmask |= WORKFLOWTASKNAME_COLUMN_BITMASK;

		if (_originalWorkflowTaskName == null) {
			_originalWorkflowTaskName = _workflowTaskName;
		}

		_workflowTaskName = workflowTaskName;
	}

	public String getOriginalWorkflowTaskName() {
		return GetterUtil.getString(_originalWorkflowTaskName);
	}

	@JSON

	public long getDDMTemplateId() {
		return _DDMTemplateId;
	}


	public void setDDMTemplateId(long DDMTemplateId) {
		_DDMTemplateId = DDMTemplateId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}


	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KaleoProcessLink.class.getName(), getPrimaryKey());
	}


	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}


	public KaleoProcessLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KaleoProcessLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}


	public Object clone() {
		KaleoProcessLinkImpl kaleoProcessLinkImpl = new KaleoProcessLinkImpl();

		kaleoProcessLinkImpl.setKaleoProcessLinkId(getKaleoProcessLinkId());
		kaleoProcessLinkImpl.setKaleoProcessId(getKaleoProcessId());
		kaleoProcessLinkImpl.setWorkflowTaskName(getWorkflowTaskName());
		kaleoProcessLinkImpl.setDDMTemplateId(getDDMTemplateId());

		kaleoProcessLinkImpl.resetOriginalValues();

		return kaleoProcessLinkImpl;
	}


	public int compareTo(KaleoProcessLink kaleoProcessLink) {
		long primaryKey = kaleoProcessLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}


	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KaleoProcessLink)) {
			return false;
		}

		KaleoProcessLink kaleoProcessLink = (KaleoProcessLink)obj;

		long primaryKey = kaleoProcessLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}


	public int hashCode() {
		return (int)getPrimaryKey();
	}


	public void resetOriginalValues() {
		KaleoProcessLinkModelImpl kaleoProcessLinkModelImpl = this;

		kaleoProcessLinkModelImpl._originalKaleoProcessId = kaleoProcessLinkModelImpl._kaleoProcessId;

		kaleoProcessLinkModelImpl._setOriginalKaleoProcessId = false;

		kaleoProcessLinkModelImpl._originalWorkflowTaskName = kaleoProcessLinkModelImpl._workflowTaskName;

		kaleoProcessLinkModelImpl._columnBitmask = 0;
	}


	public CacheModel<KaleoProcessLink> toCacheModel() {
		KaleoProcessLinkCacheModel kaleoProcessLinkCacheModel = new KaleoProcessLinkCacheModel();

		kaleoProcessLinkCacheModel.kaleoProcessLinkId = getKaleoProcessLinkId();

		kaleoProcessLinkCacheModel.kaleoProcessId = getKaleoProcessId();

		kaleoProcessLinkCacheModel.workflowTaskName = getWorkflowTaskName();

		String workflowTaskName = kaleoProcessLinkCacheModel.workflowTaskName;

		if ((workflowTaskName != null) && (workflowTaskName.length() == 0)) {
			kaleoProcessLinkCacheModel.workflowTaskName = null;
		}

		kaleoProcessLinkCacheModel.DDMTemplateId = getDDMTemplateId();

		return kaleoProcessLinkCacheModel;
	}


	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{kaleoProcessLinkId=");
		sb.append(getKaleoProcessLinkId());
		sb.append(", kaleoProcessId=");
		sb.append(getKaleoProcessId());
		sb.append(", workflowTaskName=");
		sb.append(getWorkflowTaskName());
		sb.append(", DDMTemplateId=");
		sb.append(getDDMTemplateId());
		sb.append("}");

		return sb.toString();
	}


	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portal.workflow.kaleo.forms.model.KaleoProcessLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kaleoProcessLinkId</column-name><column-value><![CDATA[");
		sb.append(getKaleoProcessLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kaleoProcessId</column-name><column-value><![CDATA[");
		sb.append(getKaleoProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowTaskName</column-name><column-value><![CDATA[");
		sb.append(getWorkflowTaskName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DDMTemplateId</column-name><column-value><![CDATA[");
		sb.append(getDDMTemplateId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KaleoProcessLink.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KaleoProcessLink.class
		};
	private long _kaleoProcessLinkId;
	private long _kaleoProcessId;
	private long _originalKaleoProcessId;
	private boolean _setOriginalKaleoProcessId;
	private String _workflowTaskName;
	private String _originalWorkflowTaskName;
	private long _DDMTemplateId;
	private long _columnBitmask;
	private KaleoProcessLink _escapedModel;
}